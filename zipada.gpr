--  This is a GNAT, GCC or GNAT Studio project file
--  for the Zip-Ada project:
--
--      home page:     http://unzip-ada.sf.net/
--      project page:  http://sf.net/projects/unzip-ada/
--      mirror:        https://github.com/zertovitch/zip-ada
--
--  Build me with "gprbuild -P zipada", or "gnatmake -P zipada",
--  or open me with GNAT Studio.
--
--  Important: for building tests, see the zipada_test.gpr project file.
--
project ZipAda is

   type Zip_Build_Mode_Type is
      ("Debug", 
       "Fast", 
       "Small",
       "Profiling",
       "Coverage",
       "Style_Checks",
       --  Check_2005 mode is for checking that the *library* is strictly
       --  Ada-2005-compliant, for being compiled by a broader set of compilers.
       --  The demos, tools and tests may use some Ada 2012+ features.
       "Check_2005"
      );
   Zip_Build_Mode : Zip_Build_Mode_Type := external ("Zip_Build_Mode", "Fast");
   for Exec_Dir use ".";
   for Create_Missing_Dirs use "True";  --  Flips by default the "-p" switch
   
   case Zip_Build_Mode is
      when "Check_2005" =>
         for Source_Dirs use ("zip_lib");
         for Main use ();
      when others =>
         for Source_Dirs use ("zip_lib", "extras", "tools", "demo");
         for Main use (
           --  Tools
           "zipada.adb", 
           "unzipada.adb",
           "comp_zip.adb", 
           "rezip.adb",
           --  Miscellaneous
           "lzma_dec", --  LZMA decoder
           "lzma_enc"  --  LZMA encoder
         );
   end case;

   case Zip_Build_Mode is
      when "Fast"      =>  for Object_Dir use "obj_opt";
      when "Small"     =>  for Object_Dir use "obj_small";
      when "Profiling" =>  for Object_Dir use "obj_pro";
      when "Coverage"  =>  for Object_Dir use "obj_cov";
      when others      =>  for Object_Dir use "obj_dbg";
   end case;

   Common_Options := (
     "-gnatwa",                        --  Warnings switches (a:turn on all info/warnings marked with +)
     "-gnatwh",                        --  Warnings switches (h:turn on warnings for hiding declarations)
     "-gnatwcijkmopruvz.c.n.p.t.w.x",  --  Warnings switches (run "gnatmake" for full list)
     "-gnatf",  --  Full errors. Verbose details, all undefined references
     "-gnatq",  --  Don't quit, try semantics, even if parse errors
     "-gnatQ",  --  Don't quit, write ali/tree file even if compile errors
     "-g"
   );

   Debug_Options  :=
     Common_Options & (
       "-gnatVa",  --  Turn on all validity checking options
       "-gnato",   --  Enable overflow checking in STRICT (-gnato1) mode
       "-gnata",   --  Assertions enabled. Pragma Assert and pragma Debug to be activated.
       "-fno-inline", "-fstack-check",
       "-gnatec=" & project'Project_Dir & "debug.pra"
       );

   Fast_Options_Inlining_Neutral :=
     Common_Options & (
       "-O2", "-gnatp",
       "-funroll-loops", "-fpeel-loops", "-funswitch-loops",
       "-ftracer", "-fweb", "-frename-registers", 
       "-fpredictive-commoning", "-fgcse-after-reload",
       "-ftree-vectorize", "-fipa-cp-clone",
       "-ffunction-sections", 
       "-gnatec=" & project'Project_Dir & "za_elim.pra"
     );

   Fast_Options :=
     Fast_Options_Inlining_Neutral & (
       "-gnatn"  --  Cross-unit inlining
     );

   type Zip_OS_Kind is
      ("Win32", "Win64", "Linux", "MacOSX", "Any");

   Zip_OS : Zip_OS_Kind := external ("Zip_OS_Kind", "Any");

   package Compiler is

      case Zip_Build_Mode is

         when "Check_2005" =>
            for Default_Switches ("ada") use Common_Options & 
              ( "-gnat05",
                "-gnatec=" & project'Project_Dir & "restrictions.pra"
              );

         when "Debug" =>
            for Default_Switches ("ada") use Debug_Options ;

         when "Style_Checks" =>
            for Default_Switches ("ada") use
              Debug_Options & 
                ( "-gnatyaknpr",  --  Style: check all casings: a:attribute, k:keywords, n:package Standard identifiers, p:pragma, r:identifier references
                  "-gnatybfhiu",  --  Style: check b:no blanks at end of lines, f:no ff/vtabs, h: no htabs, i:if-then layout, u:no unnecessary blank lines
                  "-gnatyO",      --  Style: check that overriding subprograms are explicitly marked as such.
                  "-gnatyx",      --  Style: check x:no extra parens
                  "-gnatye",      --  Style: check e:end/exit labels present
                  "-gnatytc"      --  Style: check t:token separation rules, c:comment format (two spaces)
                );

         when "Fast" =>
            case Zip_OS is
              when "Win32" | "Win64" =>
                for Default_Switches ("ada") use
                  Fast_Options & ("-mfpmath=sse", "-msse3");
              when others =>
                for Default_Switches ("ada") use Fast_Options;
            end case;

         when "Small" =>
            for Default_Switches ("ada") use
              Common_Options & (
                "-Os", "-gnatp",
                "-ffunction-sections", 
                "-gnatec=" & project'Project_Dir & "za_elim.pra"
              );

         when "Profiling" =>
            for Default_Switches ("ada") use
              Fast_Options_Inlining_Neutral & ("-fno-inline", "-pg");

         when "Coverage" =>
            for Default_Switches ("ada") use
              Common_Options & ("-fprofile-arcs", "-ftest-coverage");
      end case;
   end Compiler;

   Common_Linker_Options := ("-g");

   --  case Zip_OS is
   --    when "Win32" | "Win64" =>
   --      Common_Linker_Options :=
   --        Common_Linker_Options & ("-Wl,--stack=0x2000000");
   --        --  Ideally: -Xlinker --stack=0x2000000,0x20000
   --    when others =>
   --      null;
   --  end case;

   Linker_GC_Options := ();

   -- JANO: somehow this is failing anyway
   case Zip_OS is
      when "MacOSX" => null;
      when others => Linker_GC_Options := (); -- ("-Wl,--gc-sections");
   end case;

   package Linker is
      case Zip_Build_Mode is
         when "Fast"      => for Default_Switches ("ada") use Linker_GC_Options           & Common_Linker_Options;
         when "Small"     => for Default_Switches ("ada") use ("-s") & Linker_GC_Options  & Common_Linker_Options;
         when "Profiling" => for Default_Switches ("ada") use ("-pg")                     & Common_Linker_Options;
         when "Coverage"  => for Default_Switches ("ada") use ("-fprofile-arcs")          & Common_Linker_Options;
         when others      => for Default_Switches ("ada") use                               Common_Linker_Options;
      end case;
   end Linker;

   package Binder is
      --  -Es: Store tracebacks in exception occurrences, and enable symbolic tracebacks
      for Default_Switches ("ada") use ("-Es");
   end Binder;

   package Builder is
      --   "If -j0 is used, then the maximum number of simultaneous compilation
      --    jobs is the number of core processors on the platform."
      for Default_Switches ("ada") use ("-j0");
   end Builder;

   package Ide is
      for Default_Switches ("adacontrol") use ("-f", "tools/verif.aru", "-r");
      for Vcs_Kind use "Subversion";
   end Ide;
   
end ZipAda;
